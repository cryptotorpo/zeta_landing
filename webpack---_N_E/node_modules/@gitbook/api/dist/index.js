var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/event-iterator/lib/event-iterator.js
var require_event_iterator = __commonJS({
  "../../node_modules/event-iterator/lib/event-iterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventQueue = class {
      constructor() {
        this.pullQueue = [];
        this.pushQueue = [];
        this.eventHandlers = {};
        this.isPaused = false;
        this.isStopped = false;
      }
      push(value) {
        if (this.isStopped)
          return;
        const resolution = { value, done: false };
        if (this.pullQueue.length) {
          const placeholder = this.pullQueue.shift();
          if (placeholder)
            placeholder.resolve(resolution);
        } else {
          this.pushQueue.push(Promise.resolve(resolution));
          if (this.highWaterMark !== void 0 && this.pushQueue.length >= this.highWaterMark && !this.isPaused) {
            this.isPaused = true;
            if (this.eventHandlers.highWater) {
              this.eventHandlers.highWater();
            } else if (console) {
              console.warn(`EventIterator queue reached ${this.pushQueue.length} items`);
            }
          }
        }
      }
      stop() {
        if (this.isStopped)
          return;
        this.isStopped = true;
        this.remove();
        for (const placeholder of this.pullQueue) {
          placeholder.resolve({ value: void 0, done: true });
        }
        this.pullQueue.length = 0;
      }
      fail(error) {
        if (this.isStopped)
          return;
        this.isStopped = true;
        this.remove();
        if (this.pullQueue.length) {
          for (const placeholder of this.pullQueue) {
            placeholder.reject(error);
          }
          this.pullQueue.length = 0;
        } else {
          const rejection = Promise.reject(error);
          rejection.catch(() => {
          });
          this.pushQueue.push(rejection);
        }
      }
      remove() {
        Promise.resolve().then(() => {
          if (this.removeCallback)
            this.removeCallback();
        });
      }
      [Symbol.asyncIterator]() {
        return {
          next: (value) => {
            const result = this.pushQueue.shift();
            if (result) {
              if (this.lowWaterMark !== void 0 && this.pushQueue.length <= this.lowWaterMark && this.isPaused) {
                this.isPaused = false;
                if (this.eventHandlers.lowWater) {
                  this.eventHandlers.lowWater();
                }
              }
              return result;
            } else if (this.isStopped) {
              return Promise.resolve({ value: void 0, done: true });
            } else {
              return new Promise((resolve, reject) => {
                this.pullQueue.push({ resolve, reject });
              });
            }
          },
          return: () => {
            this.isStopped = true;
            this.pushQueue.length = 0;
            this.remove();
            return Promise.resolve({ value: void 0, done: true });
          }
        };
      }
    };
    var EventIterator2 = class {
      constructor(listen, { highWaterMark = 100, lowWaterMark = 1 } = {}) {
        const queue = new EventQueue();
        queue.highWaterMark = highWaterMark;
        queue.lowWaterMark = lowWaterMark;
        queue.removeCallback = listen({
          push: (value) => queue.push(value),
          stop: () => queue.stop(),
          fail: (error) => queue.fail(error),
          on: (event, fn) => {
            queue.eventHandlers[event] = fn;
          }
        }) || (() => {
        });
        this[Symbol.asyncIterator] = () => queue[Symbol.asyncIterator]();
        Object.freeze(this);
      }
    };
    exports.EventIterator = EventIterator2;
    exports.default = EventIterator2;
  }
});

// ../../node_modules/event-iterator/lib/node.js
var require_node = __commonJS({
  "../../node_modules/event-iterator/lib/node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var event_iterator_1 = require_event_iterator();
    exports.EventIterator = event_iterator_1.EventIterator;
    function stream(evOptions) {
      return new event_iterator_1.EventIterator((queue) => {
        this.addListener("data", queue.push);
        this.addListener("end", queue.stop);
        this.addListener("error", queue.fail);
        queue.on("highWater", () => this.pause());
        queue.on("lowWater", () => this.resume());
        return () => {
          this.removeListener("data", queue.push);
          this.removeListener("end", queue.stop);
          this.removeListener("error", queue.fail);
          if (this.destroy) {
            this.destroy();
          } else if (typeof this.close == "function") {
            ;
            this.close();
          }
        };
      }, evOptions);
    }
    exports.stream = stream;
    exports.default = event_iterator_1.EventIterator;
  }
});

// package.json
var name = "@gitbook/api";
var version = "0.81.0";

// src/client.ts
var import_event_iterator = __toESM(require_node(), 1);

// ../../node_modules/eventsource-parser/dist/index.js
function createParser(onParse) {
  let isFirstChunk;
  let buffer;
  let startingPosition;
  let startingFieldLength;
  let eventId;
  let eventName;
  let data;
  reset();
  return {
    feed,
    reset
  };
  function reset() {
    isFirstChunk = true;
    buffer = "";
    startingPosition = 0;
    startingFieldLength = -1;
    eventId = void 0;
    eventName = void 0;
    data = "";
  }
  function feed(chunk) {
    buffer = buffer ? buffer + chunk : chunk;
    if (isFirstChunk && hasBom(buffer)) {
      buffer = buffer.slice(BOM.length);
    }
    isFirstChunk = false;
    const length = buffer.length;
    let position = 0;
    let discardTrailingNewline = false;
    while (position < length) {
      if (discardTrailingNewline) {
        if (buffer[position] === "\n") {
          ++position;
        }
        discardTrailingNewline = false;
      }
      let lineLength = -1;
      let fieldLength = startingFieldLength;
      let character;
      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {
        character = buffer[index];
        if (character === ":" && fieldLength < 0) {
          fieldLength = index - position;
        } else if (character === "\r") {
          discardTrailingNewline = true;
          lineLength = index - position;
        } else if (character === "\n") {
          lineLength = index - position;
        }
      }
      if (lineLength < 0) {
        startingPosition = length - position;
        startingFieldLength = fieldLength;
        break;
      } else {
        startingPosition = 0;
        startingFieldLength = -1;
      }
      parseEventStreamLine(buffer, position, fieldLength, lineLength);
      position += lineLength + 1;
    }
    if (position === length) {
      buffer = "";
    } else if (position > 0) {
      buffer = buffer.slice(position);
    }
  }
  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {
    if (lineLength === 0) {
      if (data.length > 0) {
        onParse({
          type: "event",
          id: eventId,
          event: eventName || void 0,
          data: data.slice(0, -1)
        });
        data = "";
        eventId = void 0;
      }
      eventName = void 0;
      return;
    }
    const noValue = fieldLength < 0;
    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));
    let step = 0;
    if (noValue) {
      step = lineLength;
    } else if (lineBuffer[index + fieldLength + 1] === " ") {
      step = fieldLength + 2;
    } else {
      step = fieldLength + 1;
    }
    const position = index + step;
    const valueLength = lineLength - step;
    const value = lineBuffer.slice(position, position + valueLength).toString();
    if (field === "data") {
      data += value ? "".concat(value, "\n") : "\n";
    } else if (field === "event") {
      eventName = value;
    } else if (field === "id" && !value.includes("\0")) {
      eventId = value;
    } else if (field === "retry") {
      const retry = parseInt(value, 10);
      if (!Number.isNaN(retry)) {
        onParse({
          type: "reconnect-interval",
          value: retry
        });
      }
    }
  }
}
var BOM = [239, 187, 191];
function hasBom(buffer) {
  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);
}

// src/client.ts
var ContentVisibility = /* @__PURE__ */ ((ContentVisibility2) => {
  ContentVisibility2["Public"] = "public";
  ContentVisibility2["Unlisted"] = "unlisted";
  ContentVisibility2["ShareLink"] = "share-link";
  ContentVisibility2["VisitorAuth"] = "visitor-auth";
  ContentVisibility2["InCollection"] = "in-collection";
  ContentVisibility2["Private"] = "private";
  return ContentVisibility2;
})(ContentVisibility || {});
var SpaceEditMode = /* @__PURE__ */ ((SpaceEditMode2) => {
  SpaceEditMode2["Live"] = "live";
  SpaceEditMode2["Locked"] = "locked";
  return SpaceEditMode2;
})(SpaceEditMode || {});
var GitSyncProvider = /* @__PURE__ */ ((GitSyncProvider2) => {
  GitSyncProvider2["Github"] = "github";
  GitSyncProvider2["Gitlab"] = "gitlab";
  GitSyncProvider2["GithubLegacy"] = "github-legacy";
  return GitSyncProvider2;
})(GitSyncProvider || {});
var MemberRole = /* @__PURE__ */ ((MemberRole2) => {
  MemberRole2["Admin"] = "admin";
  MemberRole2["Create"] = "create";
  MemberRole2["Edit"] = "edit";
  MemberRole2["Review"] = "review";
  MemberRole2["Comment"] = "comment";
  MemberRole2["Read"] = "read";
  return MemberRole2;
})(MemberRole || {});
var RevisionPageLayoutOptionsCoverSize = /* @__PURE__ */ ((RevisionPageLayoutOptionsCoverSize2) => {
  RevisionPageLayoutOptionsCoverSize2["Hero"] = "hero";
  RevisionPageLayoutOptionsCoverSize2["Full"] = "full";
  return RevisionPageLayoutOptionsCoverSize2;
})(RevisionPageLayoutOptionsCoverSize || {});
var AnalyticsSearchPeriod = /* @__PURE__ */ ((AnalyticsSearchPeriod2) => {
  AnalyticsSearchPeriod2["LastMonth"] = "last_month";
  AnalyticsSearchPeriod2["LastWeek"] = "last_week";
  AnalyticsSearchPeriod2["LastYear"] = "last_year";
  return AnalyticsSearchPeriod2;
})(AnalyticsSearchPeriod || {});
var AnalyticsTrafficInterval = /* @__PURE__ */ ((AnalyticsTrafficInterval2) => {
  AnalyticsTrafficInterval2["Daily"] = "daily";
  AnalyticsTrafficInterval2["Weekly"] = "weekly";
  AnalyticsTrafficInterval2["Monthly"] = "monthly";
  return AnalyticsTrafficInterval2;
})(AnalyticsTrafficInterval || {});
var ChangeRequestStatus = /* @__PURE__ */ ((ChangeRequestStatus2) => {
  ChangeRequestStatus2["Draft"] = "draft";
  ChangeRequestStatus2["Open"] = "open";
  ChangeRequestStatus2["Archived"] = "archived";
  ChangeRequestStatus2["Merged"] = "merged";
  return ChangeRequestStatus2;
})(ChangeRequestStatus || {});
var ImportContentSource = /* @__PURE__ */ ((ImportContentSource2) => {
  ImportContentSource2["Website"] = "website";
  ImportContentSource2["Docx"] = "docx";
  ImportContentSource2["Markdown"] = "markdown";
  ImportContentSource2["Html"] = "html";
  ImportContentSource2["Zip"] = "zip";
  ImportContentSource2["Confluence"] = "confluence";
  ImportContentSource2["GithubWiki"] = "github-wiki";
  ImportContentSource2["DropboxPaper"] = "dropbox-paper";
  ImportContentSource2["Notion"] = "notion";
  ImportContentSource2["Quip"] = "quip";
  ImportContentSource2["GoogleDocs"] = "google-docs";
  ImportContentSource2["OpenApi"] = "open-api";
  return ImportContentSource2;
})(ImportContentSource || {});
var OrganizationType = /* @__PURE__ */ ((OrganizationType2) => {
  OrganizationType2["Business"] = "business";
  OrganizationType2["Community"] = "community";
  return OrganizationType2;
})(OrganizationType || {});
var OrganizationUseCase = /* @__PURE__ */ ((OrganizationUseCase2) => {
  OrganizationUseCase2["InternalDocs"] = "internalDocs";
  OrganizationUseCase2["DocsSite"] = "docsSite";
  OrganizationUseCase2["AudienceControlledSite"] = "audienceControlledSite";
  OrganizationUseCase2["ProductDocs"] = "productDocs";
  OrganizationUseCase2["TeamKnowledgeBase"] = "teamKnowledgeBase";
  OrganizationUseCase2["DesignSystem"] = "designSystem";
  OrganizationUseCase2["OpenSourceDocs"] = "openSourceDocs";
  OrganizationUseCase2["Notes"] = "notes";
  OrganizationUseCase2["Other"] = "other";
  return OrganizationUseCase2;
})(OrganizationUseCase || {});
var OrganizationCommunityType = /* @__PURE__ */ ((OrganizationCommunityType2) => {
  OrganizationCommunityType2["NonProfit"] = "nonProfit";
  OrganizationCommunityType2["OpenSource"] = "openSource";
  OrganizationCommunityType2["Education"] = "education";
  return OrganizationCommunityType2;
})(OrganizationCommunityType || {});
var BillingProduct = /* @__PURE__ */ ((BillingProduct2) => {
  BillingProduct2["Free2024"] = "free_2024";
  BillingProduct2["Plus2024"] = "plus_2024";
  BillingProduct2["Pro2024"] = "pro_2024";
  BillingProduct2["Enterprise2024"] = "enterprise_2024";
  BillingProduct2["Community2024"] = "community_2024";
  BillingProduct2["Free"] = "free";
  BillingProduct2["Plus"] = "plus";
  BillingProduct2["Pro"] = "pro";
  BillingProduct2["Team"] = "team";
  BillingProduct2["Business"] = "business";
  BillingProduct2["Legacy"] = "legacy";
  BillingProduct2["Startup"] = "startup";
  BillingProduct2["Enterprise"] = "enterprise";
  BillingProduct2["Community"] = "community";
  BillingProduct2["TeamOct2019Free"] = "team_oct_2019_free";
  BillingProduct2["TeamDec2021"] = "team_dec_2021";
  BillingProduct2["BusinessDec2021"] = "business_dec_2021";
  return BillingProduct2;
})(BillingProduct || {});
var OrganizationBlockReason = /* @__PURE__ */ ((OrganizationBlockReason2) => {
  OrganizationBlockReason2["Security"] = "security";
  return OrganizationBlockReason2;
})(OrganizationBlockReason || {});
var IntegrationTarget = /* @__PURE__ */ ((IntegrationTarget2) => {
  IntegrationTarget2["All"] = "all";
  IntegrationTarget2["Site"] = "site";
  IntegrationTarget2["Space"] = "space";
  IntegrationTarget2["Organization"] = "organization";
  return IntegrationTarget2;
})(IntegrationTarget || {});
var IntegrationVisibility = /* @__PURE__ */ ((IntegrationVisibility2) => {
  IntegrationVisibility2["Public"] = "public";
  IntegrationVisibility2["Private"] = "private";
  IntegrationVisibility2["Unlisted"] = "unlisted";
  return IntegrationVisibility2;
})(IntegrationVisibility || {});
var IntegrationScope = /* @__PURE__ */ ((IntegrationScope2) => {
  IntegrationScope2["SnippetsRead"] = "snippets:read";
  IntegrationScope2["CaptureWrite"] = "capture:write";
  IntegrationScope2["SpaceViewsRead"] = "space:views:read";
  IntegrationScope2["SpaceContentRead"] = "space:content:read";
  IntegrationScope2["SpaceContentWrite"] = "space:content:write";
  IntegrationScope2["SpaceMetadataRead"] = "space:metadata:read";
  IntegrationScope2["SpaceMetadataWrite"] = "space:metadata:write";
  IntegrationScope2["SpaceScriptInject"] = "space:script:inject";
  IntegrationScope2["SpaceScriptCookies"] = "space:script:cookies";
  IntegrationScope2["SpaceGitSync"] = "space:git:sync";
  IntegrationScope2["SpaceVisitorAuth"] = "space:visitor:auth";
  IntegrationScope2["SiteMetadataRead"] = "site:metadata:read";
  IntegrationScope2["SiteViewsRead"] = "site:views:read";
  IntegrationScope2["SiteScriptInject"] = "site:script:inject";
  IntegrationScope2["SiteScriptCookies"] = "site:script:cookies";
  IntegrationScope2["SiteVisitorAuth"] = "site:visitor:auth";
  return IntegrationScope2;
})(IntegrationScope || {});
var IntegrationCategory = /* @__PURE__ */ ((IntegrationCategory2) => {
  IntegrationCategory2["Analytics"] = "analytics";
  IntegrationCategory2["Captures"] = "captures";
  IntegrationCategory2["Collaboration"] = "collaboration";
  IntegrationCategory2["Content"] = "content";
  IntegrationCategory2["Gitsync"] = "gitsync";
  IntegrationCategory2["Marketing"] = "marketing";
  IntegrationCategory2["VisitorAuth"] = "visitor-auth";
  IntegrationCategory2["Other"] = "other";
  return IntegrationCategory2;
})(IntegrationCategory || {});
var ContentReferenceStatus = /* @__PURE__ */ ((ContentReferenceStatus2) => {
  ContentReferenceStatus2["Ok"] = "ok";
  ContentReferenceStatus2["Broken"] = "broken";
  ContentReferenceStatus2["InApp"] = "in-app";
  return ContentReferenceStatus2;
})(ContentReferenceStatus || {});
var ContentReferenceRelation = /* @__PURE__ */ ((ContentReferenceRelation2) => {
  ContentReferenceRelation2["Reference"] = "reference";
  ContentReferenceRelation2["DependsOn"] = "dependsOn";
  return ContentReferenceRelation2;
})(ContentReferenceRelation || {});
var ChangeRequestReviewStatus = /* @__PURE__ */ ((ChangeRequestReviewStatus2) => {
  ChangeRequestReviewStatus2["ChangesRequested"] = "changes-requested";
  ChangeRequestReviewStatus2["Approved"] = "approved";
  return ChangeRequestReviewStatus2;
})(ChangeRequestReviewStatus || {});
var RevisionPageType = /* @__PURE__ */ ((RevisionPageType2) => {
  RevisionPageType2["Document"] = "document";
  RevisionPageType2["Group"] = "group";
  RevisionPageType2["Link"] = "link";
  RevisionPageType2["Computed"] = "computed";
  return RevisionPageType2;
})(RevisionPageType || {});
var RevisionPageLayoutPreset = /* @__PURE__ */ ((RevisionPageLayoutPreset2) => {
  RevisionPageLayoutPreset2["Docs"] = "docs";
  RevisionPageLayoutPreset2["Editorial"] = "editorial";
  RevisionPageLayoutPreset2["Landing"] = "landing";
  return RevisionPageLayoutPreset2;
})(RevisionPageLayoutPreset || {});
var CustomizationCorners = /* @__PURE__ */ ((CustomizationCorners2) => {
  CustomizationCorners2["Straight"] = "straight";
  CustomizationCorners2["Rounded"] = "rounded";
  return CustomizationCorners2;
})(CustomizationCorners || {});
var CustomizationFont = /* @__PURE__ */ ((CustomizationFont2) => {
  CustomizationFont2["ABCFavorit"] = "ABCFavorit";
  CustomizationFont2["Inter"] = "Inter";
  CustomizationFont2["Roboto"] = "Roboto";
  CustomizationFont2["RobotoSlab"] = "RobotoSlab";
  CustomizationFont2["OpenSans"] = "OpenSans";
  CustomizationFont2["SourceSansPro"] = "SourceSansPro";
  CustomizationFont2["Lato"] = "Lato";
  CustomizationFont2["Ubuntu"] = "Ubuntu";
  CustomizationFont2["Raleway"] = "Raleway";
  CustomizationFont2["Merriweather"] = "Merriweather";
  CustomizationFont2["Overpass"] = "Overpass";
  CustomizationFont2["NotoSans"] = "NotoSans";
  CustomizationFont2["IBMPlexSerif"] = "IBMPlexSerif";
  CustomizationFont2["Poppins"] = "Poppins";
  CustomizationFont2["FiraSans"] = "FiraSans";
  return CustomizationFont2;
})(CustomizationFont || {});
var CustomizationBackground = /* @__PURE__ */ ((CustomizationBackground2) => {
  CustomizationBackground2["Plain"] = "plain";
  CustomizationBackground2["Match"] = "match";
  return CustomizationBackground2;
})(CustomizationBackground || {});
var CustomizationLocale = /* @__PURE__ */ ((CustomizationLocale2) => {
  CustomizationLocale2["En"] = "en";
  CustomizationLocale2["Fr"] = "fr";
  CustomizationLocale2["Es"] = "es";
  CustomizationLocale2["Zh"] = "zh";
  CustomizationLocale2["Ja"] = "ja";
  CustomizationLocale2["De"] = "de";
  CustomizationLocale2["Nl"] = "nl";
  CustomizationLocale2["No"] = "no";
  CustomizationLocale2["PtBr"] = "pt-br";
  return CustomizationLocale2;
})(CustomizationLocale || {});
var CustomizationHeaderPreset = /* @__PURE__ */ ((CustomizationHeaderPreset2) => {
  CustomizationHeaderPreset2["Default"] = "default";
  CustomizationHeaderPreset2["Bold"] = "bold";
  CustomizationHeaderPreset2["Contrast"] = "contrast";
  CustomizationHeaderPreset2["Custom"] = "custom";
  CustomizationHeaderPreset2["None"] = "none";
  return CustomizationHeaderPreset2;
})(CustomizationHeaderPreset || {});
var CustomizationThemeMode = /* @__PURE__ */ ((CustomizationThemeMode2) => {
  CustomizationThemeMode2["Light"] = "light";
  CustomizationThemeMode2["Dark"] = "dark";
  return CustomizationThemeMode2;
})(CustomizationThemeMode || {});
var CustomFieldType = /* @__PURE__ */ ((CustomFieldType2) => {
  CustomFieldType2["Text"] = "text";
  CustomFieldType2["Number"] = "number";
  CustomFieldType2["Boolean"] = "boolean";
  CustomFieldType2["Tags"] = "tags";
  CustomFieldType2["SelectMulti"] = "select:multi";
  CustomFieldType2["SelectSingle"] = "select:single";
  return CustomFieldType2;
})(CustomFieldType || {});
var PageFeedbackRating = /* @__PURE__ */ ((PageFeedbackRating2) => {
  PageFeedbackRating2["Bad"] = "bad";
  PageFeedbackRating2["Ok"] = "ok";
  PageFeedbackRating2["Good"] = "good";
  return PageFeedbackRating2;
})(PageFeedbackRating || {});
var IntegrationInstallationStatus = /* @__PURE__ */ ((IntegrationInstallationStatus2) => {
  IntegrationInstallationStatus2["Active"] = "active";
  IntegrationInstallationStatus2["Pending"] = "pending";
  IntegrationInstallationStatus2["Paused"] = "paused";
  return IntegrationInstallationStatus2;
})(IntegrationInstallationStatus || {});
var IntegrationInstallationSpaceSelection = /* @__PURE__ */ ((IntegrationInstallationSpaceSelection2) => {
  IntegrationInstallationSpaceSelection2["All"] = "all";
  IntegrationInstallationSpaceSelection2["Selected"] = "selected";
  return IntegrationInstallationSpaceSelection2;
})(IntegrationInstallationSpaceSelection || {});
var IntegrationInstallationSiteSelection = /* @__PURE__ */ ((IntegrationInstallationSiteSelection2) => {
  IntegrationInstallationSiteSelection2["All"] = "all";
  IntegrationInstallationSiteSelection2["Selected"] = "selected";
  return IntegrationInstallationSiteSelection2;
})(IntegrationInstallationSiteSelection || {});
var ContentKitIcon = /* @__PURE__ */ ((ContentKitIcon2) => {
  ContentKitIcon2["Close"] = "close";
  ContentKitIcon2["Edit"] = "edit";
  ContentKitIcon2["Github"] = "github";
  ContentKitIcon2["Gitlab"] = "gitlab";
  ContentKitIcon2["Maximize"] = "maximize";
  ContentKitIcon2["Email"] = "email";
  ContentKitIcon2["Settings"] = "settings";
  ContentKitIcon2["Search"] = "search";
  ContentKitIcon2["Delete"] = "delete";
  ContentKitIcon2["Star"] = "star";
  ContentKitIcon2["Warning"] = "warning";
  ContentKitIcon2["Link"] = "link";
  ContentKitIcon2["LinkExternal"] = "link-external";
  ContentKitIcon2["Eye"] = "eye";
  ContentKitIcon2["Lock"] = "lock";
  return ContentKitIcon2;
})(ContentKitIcon || {});
var SiteType = /* @__PURE__ */ ((SiteType2) => {
  SiteType2["Basic"] = "basic";
  SiteType2["Premium"] = "premium";
  SiteType2["Ultimate"] = "ultimate";
  SiteType2["Sponsored"] = "sponsored";
  SiteType2["LegacyBasic"] = "legacy-basic";
  SiteType2["LegacyPremium"] = "legacy-premium";
  return SiteType2;
})(SiteType || {});
var SiteVisibility = /* @__PURE__ */ ((SiteVisibility2) => {
  SiteVisibility2["Public"] = "public";
  SiteVisibility2["Unlisted"] = "unlisted";
  SiteVisibility2["ShareLink"] = "share-link";
  SiteVisibility2["VisitorAuth"] = "visitor-auth";
  return SiteVisibility2;
})(SiteVisibility || {});
var SiteAdsTopic = /* @__PURE__ */ ((SiteAdsTopic2) => {
  SiteAdsTopic2["Webdev"] = "webdev";
  SiteAdsTopic2["Crypto"] = "crypto";
  return SiteAdsTopic2;
})(SiteAdsTopic || {});
var TeamMemberRole = /* @__PURE__ */ ((TeamMemberRole2) => {
  TeamMemberRole2["Owner"] = "owner";
  TeamMemberRole2["Member"] = "member";
  return TeamMemberRole2;
})(TeamMemberRole || {});
var BillingInterval = /* @__PURE__ */ ((BillingInterval2) => {
  BillingInterval2["Monthly"] = "monthly";
  BillingInterval2["Yearly"] = "yearly";
  return BillingInterval2;
})(BillingInterval || {});
var CustomizationIconsStyle = /* @__PURE__ */ ((CustomizationIconsStyle2) => {
  CustomizationIconsStyle2["Regular"] = "regular";
  CustomizationIconsStyle2["Solid"] = "solid";
  CustomizationIconsStyle2["Duotone"] = "duotone";
  CustomizationIconsStyle2["Light"] = "light";
  CustomizationIconsStyle2["Thin"] = "thin";
  return CustomizationIconsStyle2;
})(CustomizationIconsStyle || {});
var InsightsInterval = /* @__PURE__ */ ((InsightsInterval2) => {
  InsightsInterval2["Day"] = "day";
  InsightsInterval2["Week"] = "week";
  InsightsInterval2["Month"] = "month";
  InsightsInterval2["Year"] = "year";
  return InsightsInterval2;
})(InsightsInterval || {});
var CustomHostnameDnsStatus = /* @__PURE__ */ ((CustomHostnameDnsStatus2) => {
  CustomHostnameDnsStatus2["DnsPassed"] = "dns_passed";
  CustomHostnameDnsStatus2["DnsWrongCname"] = "dns_wrong_cname";
  CustomHostnameDnsStatus2["DnsNoCname"] = "dns_no_cname";
  CustomHostnameDnsStatus2["DnsCloudflareProxied"] = "dns_cloudflare_proxied";
  CustomHostnameDnsStatus2["DnsWrongCaa"] = "dns_wrong_caa";
  return CustomHostnameDnsStatus2;
})(CustomHostnameDnsStatus || {});
var CustomHostnameSslStatus = /* @__PURE__ */ ((CustomHostnameSslStatus2) => {
  CustomHostnameSslStatus2["Live"] = "live";
  CustomHostnameSslStatus2["SslUnknown"] = "ssl_unknown";
  CustomHostnameSslStatus2["SslPending"] = "ssl_pending";
  CustomHostnameSslStatus2["SslFailed"] = "ssl_failed";
  CustomHostnameSslStatus2["SslRetryExpired"] = "ssl_retry_expired";
  return CustomHostnameSslStatus2;
})(CustomHostnameSslStatus || {});
var CustomHostnameErrorStatus = /* @__PURE__ */ ((CustomHostnameErrorStatus2) => {
  CustomHostnameErrorStatus2["InvalidDomain"] = "invalid_domain";
  CustomHostnameErrorStatus2["InternalError"] = "internal_error";
  return CustomHostnameErrorStatus2;
})(CustomHostnameErrorStatus || {});
var PurgeCDNCacheContextType = /* @__PURE__ */ ((PurgeCDNCacheContextType2) => {
  PurgeCDNCacheContextType2["Tags"] = "tags";
  PurgeCDNCacheContextType2["Hosts"] = "hosts";
  return PurgeCDNCacheContextType2;
})(PurgeCDNCacheContextType || {});
var CloudflareHostnameStatus = /* @__PURE__ */ ((CloudflareHostnameStatus2) => {
  CloudflareHostnameStatus2["Pending"] = "pending";
  CloudflareHostnameStatus2["Active"] = "active";
  CloudflareHostnameStatus2["Blocked"] = "blocked";
  CloudflareHostnameStatus2["Moved"] = "moved";
  CloudflareHostnameStatus2["Deleted"] = "deleted";
  return CloudflareHostnameStatus2;
})(CloudflareHostnameStatus || {});
var CloudflareHostnameTLSStatus = /* @__PURE__ */ ((CloudflareHostnameTLSStatus2) => {
  CloudflareHostnameTLSStatus2["Initializing"] = "initializing";
  CloudflareHostnameTLSStatus2["PendingValidation"] = "pending_validation";
  CloudflareHostnameTLSStatus2["PendingIssuance"] = "pending_issuance";
  CloudflareHostnameTLSStatus2["PendingDeployment"] = "pending_deployment";
  CloudflareHostnameTLSStatus2["Active"] = "active";
  CloudflareHostnameTLSStatus2["PendingDeletion"] = "pending_deletion";
  CloudflareHostnameTLSStatus2["PendingCleanup"] = "pending_cleanup";
  CloudflareHostnameTLSStatus2["Deleted"] = "deleted";
  return CloudflareHostnameTLSStatus2;
})(CloudflareHostnameTLSStatus || {});
var CloudflareHostnameTLSValidationMethod = /* @__PURE__ */ ((CloudflareHostnameTLSValidationMethod2) => {
  CloudflareHostnameTLSValidationMethod2["Http"] = "http";
  CloudflareHostnameTLSValidationMethod2["Txt"] = "txt";
  CloudflareHostnameTLSValidationMethod2["Email"] = "email";
  return CloudflareHostnameTLSValidationMethod2;
})(CloudflareHostnameTLSValidationMethod || {});
var SpaceBlockReason = /* @__PURE__ */ ((SpaceBlockReason2) => {
  SpaceBlockReason2["DMCA"] = "DMCA";
  SpaceBlockReason2["THREAT_TYPE_UNSPECIFIED"] = "THREAT_TYPE_UNSPECIFIED";
  SpaceBlockReason2["MALWARE"] = "MALWARE";
  SpaceBlockReason2["SOCIAL_ENGINEERING"] = "SOCIAL_ENGINEERING";
  SpaceBlockReason2["UNWANTED_SOFTWARE"] = "UNWANTED_SOFTWARE";
  return SpaceBlockReason2;
})(SpaceBlockReason || {});
var RevisionSemanticChangeType = /* @__PURE__ */ ((RevisionSemanticChangeType2) => {
  RevisionSemanticChangeType2["PageCreated"] = "page_created";
  RevisionSemanticChangeType2["PageEdited"] = "page_edited";
  RevisionSemanticChangeType2["PageDeleted"] = "page_deleted";
  RevisionSemanticChangeType2["PageMoved"] = "page_moved";
  RevisionSemanticChangeType2["FileCreated"] = "file_created";
  RevisionSemanticChangeType2["FileEdited"] = "file_edited";
  RevisionSemanticChangeType2["FileDeleted"] = "file_deleted";
  RevisionSemanticChangeType2["CustomFieldsEdited"] = "custom_fields_edited";
  return RevisionSemanticChangeType2;
})(RevisionSemanticChangeType || {});
var GitSyncOperationState = /* @__PURE__ */ ((GitSyncOperationState2) => {
  GitSyncOperationState2["Running"] = "running";
  GitSyncOperationState2["Failure"] = "failure";
  GitSyncOperationState2["Success"] = "success";
  return GitSyncOperationState2;
})(GitSyncOperationState || {});
var GitSyncOperationDirection = /* @__PURE__ */ ((GitSyncOperationDirection2) => {
  GitSyncOperationDirection2["Export"] = "export";
  GitSyncOperationDirection2["Import"] = "import";
  return GitSyncOperationDirection2;
})(GitSyncOperationDirection || {});
var GitSyncOperationStage = /* @__PURE__ */ ((GitSyncOperationStage2) => {
  GitSyncOperationStage2["RepoFetch"] = "repo_fetch";
  GitSyncOperationStage2["ConfigCheck"] = "config_check";
  GitSyncOperationStage2["ContentProcess"] = "content_process";
  GitSyncOperationStage2["Finalize"] = "finalize";
  return GitSyncOperationStage2;
})(GitSyncOperationStage || {});
var BillingTrialStatus = /* @__PURE__ */ ((BillingTrialStatus2) => {
  BillingTrialStatus2["Notapplicable"] = "notapplicable";
  BillingTrialStatus2["None"] = "none";
  BillingTrialStatus2["Active"] = "active";
  BillingTrialStatus2["Ended"] = "ended";
  BillingTrialStatus2["Expired"] = "expired";
  return BillingTrialStatus2;
})(BillingTrialStatus || {});
var APIIntegrationScope = /* @__PURE__ */ ((APIIntegrationScope2) => {
  APIIntegrationScope2["IntegrationRead"] = "integration:read";
  APIIntegrationScope2["IntegrationUpdate"] = "integration:update";
  APIIntegrationScope2["IntegrationInstallationRead"] = "integration:installation:read";
  APIIntegrationScope2["IntegrationInstallationUpdate"] = "integration:installation:update";
  return APIIntegrationScope2;
})(APIIntegrationScope || {});
var SiteAdsStatus = /* @__PURE__ */ ((SiteAdsStatus2) => {
  SiteAdsStatus2["Pending"] = "pending";
  SiteAdsStatus2["InReview"] = "in-review";
  SiteAdsStatus2["Live"] = "live";
  SiteAdsStatus2["Rejected"] = "rejected";
  SiteAdsStatus2["Disabled"] = "disabled";
  return SiteAdsStatus2;
})(SiteAdsStatus || {});
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["Json"] = "application/json";
  ContentType2["FormData"] = "multipart/form-data";
  ContentType2["UrlEncoded"] = "application/x-www-form-urlencoded";
  ContentType2["Text"] = "text/plain";
  return ContentType2;
})(ContentType || {});
var HttpClient = class {
  baseUrl = "{host}/v1";
  securityData = null;
  securityWorker;
  abortControllers = /* @__PURE__ */ new Map();
  customFetch = (...fetchParams) => fetch(...fetchParams);
  baseApiParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer"
  };
  constructor(apiConfig = {}) {
    Object.assign(this, apiConfig);
  }
  setSecurityData = (data) => {
    this.securityData = data;
  };
  encodeQueryParam(key, value) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }
  addQueryParam(query, key) {
    return this.encodeQueryParam(key, query[key]);
  }
  addArrayQueryParam(query, key) {
    const value = query[key];
    return value.map((v) => this.encodeQueryParam(key, v)).join("&");
  }
  toQueryString(rawQuery) {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys.map(
      (key) => Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)
    ).join("&");
  }
  addQueryParams(rawQuery) {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }
  contentFormatters = {
    ["application/json" /* Json */]: (input) => input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    ["text/plain" /* Text */]: (input) => input !== null && typeof input !== "string" ? JSON.stringify(input) : input,
    ["multipart/form-data" /* FormData */]: (input) => Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      formData.append(
        key,
        property instanceof Blob ? property : typeof property === "object" && property !== null ? JSON.stringify(property) : `${property}`
      );
      return formData;
    }, new FormData()),
    ["application/x-www-form-urlencoded" /* UrlEncoded */]: (input) => this.toQueryString(input)
  };
  mergeRequestParams(params1, params2) {
    return {
      ...this.baseApiParams,
      ...params1,
      ...params2 || {},
      headers: {
        ...this.baseApiParams.headers || {},
        ...params1.headers || {},
        ...params2 && params2.headers || {}
      }
    };
  }
  createAbortSignal = (cancelToken) => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController2 = this.abortControllers.get(cancelToken);
      if (abortController2) {
        return abortController2.signal;
      }
      return void 0;
    }
    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };
  abortRequest = (cancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);
    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };
  request = async ({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }) => {
    const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || "application/json" /* Json */];
    const responseFormat = format || requestParams.format;
    return this.customFetch(
      `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
      {
        ...requestParams,
        headers: {
          ...requestParams.headers || {},
          ...type && type !== "multipart/form-data" /* FormData */ ? { "Content-Type": type } : {}
        },
        signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
        body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
      }
    ).then(async (response) => {
      const r = response;
      r.data = null;
      r.error = null;
      const data = !responseFormat ? r : await response[responseFormat]().then((data2) => {
        if (r.ok) {
          r.data = data2;
        } else {
          throw new Error(`${response.status} ${response.statusText}`);
        }
        return r;
      });
      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }
      if (!response.ok)
        throw new Error(`${response.status} ${response.statusText}`);
      return data;
    });
  };
  streamRequest = ({
    body,
    path,
    type,
    baseUrl,
    cancelToken,
    secure,
    ...params
  }) => {
    return new import_event_iterator.EventIterator((queue) => {
      (async () => {
        const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
        const requestQuery = params.query;
        const requestParams = this.mergeRequestParams(params, secureParams);
        const queryString = requestQuery ? this.toQueryString(requestQuery) : void 0;
        const payloadFormatter = this.contentFormatters[type || "application/json" /* Json */];
        const response = await this.customFetch(
          `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
          {
            ...requestParams,
            headers: {
              ...requestParams.headers || {},
              ...type && type !== "multipart/form-data" /* FormData */ ? { "Content-Type": type } : {}
            },
            signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,
            body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
          }
        );
        if (!response.ok) {
          throw new Error(`${response.status} ${response.statusText}`);
        }
        if (!response.body) {
          throw new Error("Response body is empty");
        }
        const reader = response.body.getReader();
        const stop = () => {
          reader.cancel();
          queue.stop();
        };
        const parser = createParser((event) => {
          if (event.type === "event") {
            if (event.data === "done") {
              stop();
            } else {
              const data = JSON.parse(event.data);
              queue.push(data);
            }
          }
        });
        const decoder = new TextDecoder();
        while (true) {
          const { done, value } = await reader.read();
          if (value) {
            parser.feed(decoder.decode(value));
          }
          if (done) {
            break;
          }
        }
        stop();
      })().catch((error) => {
        queue.fail(error);
      });
    });
  };
};
var Api = class extends HttpClient {
  getApiInformation = (params = {}) => this.request({
    path: `/`,
    method: "GET",
    secure: true,
    format: "json",
    ...params
  });
  search = {
    searchContent: (query, params = {}) => this.request({
      path: `/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    askQueryWithGet: (query, params = {}) => this.request({
      path: `/search/ask`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    askQuery: (data, query, params = {}) => this.request({
      path: `/search/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getRecommendedQuestions: (data, params = {}) => this.request({
      path: `/search/questions`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    })
  };
  user = {
    getAuthenticatedUser: (params = {}) => this.request({
      path: `/user`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    })
  };
  users = {
    getUserById: (userId, params = {}) => this.request({
      path: `/users/${userId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    })
  };
  spaces = {
    getSpaceById: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSpaceById: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSpaceById: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    duplicateSpace: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/duplicate`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    restoreSpace: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/restore`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    moveSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    transferSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/transfer`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getEmbedByUrlInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/embed`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    searchSpaceContent: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    askQueryInSpaceWithGet: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/search/ask`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    askQueryInSpace: (spaceId, data, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/search/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    streamAskInSpace: (spaceId, query, params = {}) => this.streamRequest({
      path: `/spaces/${spaceId}/search/ask/stream`,
      method: "GET",
      query,
      secure: true,
      ...params
    }),
    getRecommendedQuestionsInSpace: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/search/questions`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    streamRecommendedQuestionsInSpace: (spaceId, params = {}) => this.streamRequest({
      path: `/spaces/${spaceId}/search/questions/stream`,
      method: "GET",
      secure: true,
      ...params
    }),
    importGitRepository: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    exportToGitRepository: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/export`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getSpaceGitInfo: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/info`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getContentAnalyticsForSpaceById: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/insights/content`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getSearchAnalyticsForSpaceById: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/insights/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getTrafficAnalyticsForSpaceById: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/insights/traffic`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    trackViewInSpaceById: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/insights/track_view`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    inviteToSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    removeTeamFromSpace: (spaceId, teamId, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/teams/${teamId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getCurrentRevision: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContent: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPages: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFiles: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileById: (spaceId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceFileBacklinks: (spaceId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files/${fileId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageById: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPageLinksInSpace: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpacePageBacklinks: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInPageById: (spaceId, pageId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getPageByPath: (spaceId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentById: (spaceId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getComputedDocument: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/computed/document`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getComputedPage: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/computed/page`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getDocumentById: (spaceId, documentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/documents/${documentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createChangeRequest: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listChangeRequestsForSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getChangeRequestById: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateChangeRequestById: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    mergeChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/merge`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    updateChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/update`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    getReviewsByChangeRequestId: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/reviews`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    submitChangeRequestReview: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/reviews`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getRequestedReviewersByChangeRequestId: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/requested-reviewers`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    requestReviewersForChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/requested-reviewers`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listChangeRequestLinks: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listCommentsInChangeRequest: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentInChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentInChangeRequest: (spaceId, changeRequestId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    deleteCommentInChangeRequest: (spaceId, changeRequestId, commentId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateCommentInChangeRequest: (spaceId, changeRequestId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCommentRepliesInChangeRequest: (spaceId, changeRequestId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, data, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getContributorsByChangeRequestId: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/contributors`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionOfChangeRequestById: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPagesInChangeRequest: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFilesInChangeRequestById: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileInChangeRequestById: (spaceId, changeRequestId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listChangeRequestFileBacklinks: (spaceId, changeRequestId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files/${fileId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInChangeRequestById: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPageLinksInChangeRequest: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listChangeRequestPageBacklinks: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInChangeRequestPageById: (spaceId, changeRequestId, pageId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getPageInChangeRequestByPath: (spaceId, changeRequestId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentInChangeRequestById: (spaceId, changeRequestId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getChangeRequestPdf: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/pdf`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionSemanticChanges: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/changes`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPagesInRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFilesInRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileInRevisionById: (spaceId, revisionId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInRevisionById: (spaceId, revisionId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInRevisionByPath: (spaceId, revisionId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentInRevisionById: (spaceId, revisionId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listCommentsInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentInSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentInSpace: (spaceId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    deleteCommentInSpace: (spaceId, commentId, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateCommentInSpace: (spaceId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCommentRepliesInSpace: (spaceId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentReplyInSpace: (spaceId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentReplyInSpace: (spaceId, commentId, commentReplyId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateCommentReplyInSpace: (spaceId, commentId, commentReplyId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCommentReplyInSpace: (spaceId, commentId, commentReplyId, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listPermissionsAggregateInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSpacePublishingCustomizationById: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/publishing/customization`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSpacePublishingCustomizationById: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/publishing/customization`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSpaceIntegrations: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceIntegrationsBlocks: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/integration-blocks`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceIntegrationScripts: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/integration-scripts`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getSpaceCustomFields: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/custom-fields`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSpaceCustomFields: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/custom-fields`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getPageFeedback: (spaceId, pageId, visitorId, params = {}) => this.request({
      path: `/spaces/${spaceId}/pages/${pageId}/feedbacks/${visitorId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    createPageFeedback: (spaceId, pageId, visitorId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/pages/${pageId}/feedbacks/${visitorId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSpacePdf: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/pdf`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceLinks: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  collections = {
    getCollectionById: (collectionId, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateCollectionById: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCollectionById: (collectionId, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listSpacesInCollectionById: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    moveCollection: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    transferCollection: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/transfer`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPermissionsAggregateInCollection: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  integrations = {
    listIntegrations: (query, params = {}) => this.request({
      path: `/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getIntegrationByName: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    publishIntegration: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    unpublishIntegration: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listIntegrationInstallations: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegration: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listIntegrationEvents: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/events`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getIntegrationEvent: (integrationName, eventId, params = {}) => this.request({
      path: `/integrations/${integrationName}/events/${eventId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listIntegrationSpaceInstallations: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    setIntegrationDevelopmentMode: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/dev`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    disableIntegrationDevelopmentMode: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}/dev`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    renderIntegrationUiWithGet: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/render`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    renderIntegrationUiWithPost: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/render`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    queueIntegrationTask: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/tasks`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getIntegrationInstallationById: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationInstallation: (integrationName, installationId, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegration: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    createIntegrationInstallationToken: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/tokens`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listIntegrationInstallationSpaces: (integrationName, installationId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegrationOnSpace: (integrationName, installationId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getIntegrationSpaceInstallation: (integrationName, installationId, spaceId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationSpaceInstallation: (integrationName, installationId, spaceId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "PATCH",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegrationFromSpace: (integrationName, installationId, spaceId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listIntegrationInstallationSites: (integrationName, installationId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegrationOnSite: (integrationName, installationId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getIntegrationSiteInstallation: (integrationName, installationId, siteId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationSiteInstallation: (integrationName, installationId, siteId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "PATCH",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegrationFromSite: (integrationName, installationId, siteId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "DELETE",
      secure: true,
      ...params
    })
  };
  orgs = {
    listOrganizationsForAuthenticatedUser: (query, params = {}) => this.request({
      path: `/orgs`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganization: (data, params = {}) => this.request({
      path: `/orgs`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    deleteOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateOrganizationById: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationAllContent: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/content`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listMembersInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getMemberInOrganizationById: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateMemberInOrganizationById: (organizationId, userId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeMemberFromOrganizationById: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateOrganizationMemberLastSeenAt: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/ping`,
      method: "POST",
      secure: true,
      ...params
    }),
    setUserAsSsoMemberForOrganization: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/sso`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listSpacesForOrganizationMember: (organizationId, userId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listTeamsForOrganizationMember: (organizationId, userId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listTeamsInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationTeam: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getTeamInOrganizationById: (organizationId, teamId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateTeamInOrganizationById: (organizationId, teamId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeTeamFromOrganizationById: (organizationId, teamId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateMembersInOrganizationTeam: (organizationId, teamId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    listTeamMembersInOrganizationById: (organizationId, teamId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addMemberToOrganizationTeamById: (organizationId, teamId, userId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    deleteMemberFromOrganizationTeamById: (organizationId, teamId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    inviteUsersToOrganization: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/invites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    joinOrganizationWithInvite: (organizationId, inviteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/invites/${inviteId}`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationContentInviteLinks: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/content-link-invites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationInviteLinks: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationInvite: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    updateOrganizationInviteById: (organizationId, inviteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites/${inviteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOrganizationInviteById: (organizationId, inviteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites/${inviteId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    upgradeOrganizationPlan: (organizationId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/billing`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationBillingPortal: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/billing/portal`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    previewBillingInvoice: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/billing/preview`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    requestOrganizationUpgrade: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/request_upgrade`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    searchOrganizationContent: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpacesInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSpace: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/spaces`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCollectionsInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/collections`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createCollection: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/collections`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listOrganizationCustomFields: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/custom-fields`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationCustomField: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/custom-fields`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationCustomFieldByName: (organizationId, fieldName, params = {}) => this.request({
      path: `/orgs/${organizationId}/custom-fields/${fieldName}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrganizationCustomField: (organizationId, fieldName, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/custom-fields/${fieldName}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOrganizationCustomField: (organizationId, fieldName, params = {}) => this.request({
      path: `/orgs/${organizationId}/custom-fields/${fieldName}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listOrganizationIntegrations: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getOrganizationIntegrationStatus: (organizationId, integrationName, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations/${integrationName}/installation_status`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationInstallations: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/installations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationIntegrationsStatus: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations/installations-status`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listOrgExperimentalFeatures: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/experiments`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrgExperimentalFeatures: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/experiments`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    listSamlProvidersInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationSamlProvider: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationSamlProviderById: (organizationId, samlProviderId, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrganizationSamlProvider: (organizationId, samlProviderId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOrganizationSamlProvider: (organizationId, samlProviderId, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listSsoProviderLoginsInOrganization: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sso`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getCollectionsUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/collections`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getSpacesUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/spaces`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getSitesUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/sites`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getTeamsUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/teams`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getMembersUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/members`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getTeamMembersUsageForOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/usage/team-members`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listCaptures: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/captures`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    startCapture: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/captures`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCapture: (organizationId, captureId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/captures/${captureId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addEventsToCapture: (organizationId, captureId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/captures/${captureId}/events`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    stopCapture: (organizationId, captureId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/captures/${captureId}/stop`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSnippets: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSnippet: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSnippet: (organizationId, snippetId, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets/${snippetId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    deleteSnippet: (organizationId, snippetId, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets/${snippetId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateSnippet: (organizationId, snippetId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets/${snippetId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    moveSnippet: (organizationId, snippetId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets/${snippetId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSnippetSuggestedLocations: (organizationId, snippetId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/snippets/${snippetId}/move`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    askInOrganization: (organizationId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getRecommendedQuestionsInOrganization: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/ask/questions`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    streamRecommendedQuestionsInOrganization: (organizationId, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/ask/questions/stream`,
      method: "GET",
      secure: true,
      ...params
    }),
    streamAskInOrganization: (organizationId, query, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/ask/stream`,
      method: "GET",
      query,
      secure: true,
      ...params
    }),
    listSites: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSite: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    previewSitePublishCheckout: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/publishing/checkout`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSiteById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getPublishedContentSite: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/published`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    publishSite: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publish`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    unpublishSite: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/unpublish`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listSiteShareLinks: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSiteShareLink: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    updateSiteShareLinkById: (organizationId, siteId, shareLinkId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links/${shareLinkId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteShareLinkById: (organizationId, siteId, shareLinkId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links/${shareLinkId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteStructure: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/structure`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSitePlan: (organizationId, siteId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/plan`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    previewSitePlanUpdate: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/plan`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSitePublishingAuthById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSitePublishingAuthById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    regenerateSitePublishingAuthById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth/regenerate`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    getSitePublishingPreviewById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/preview`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSiteCustomizationById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/customization`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteCustomizationById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/customization`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSiteRawCustomizationById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/customization/raw`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listSiteIntegrationScripts: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/integration-scripts`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listSiteIntegrations: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addSpaceToSite: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteSpaces: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addSectionToSite: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteSections: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteSectionById: (organizationId, siteId, siteSectionId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSectionById: (organizationId, siteId, siteSectionId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    searchSiteContent: (organizationId, siteId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/search`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    streamAskInSite: (organizationId, siteId, data, query, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/sites/${siteId}/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    updateSiteSpaceById: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSpaceById: (organizationId, siteId, siteSpaceId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteSpaceCustomizationById: (organizationId, siteId, siteSpaceId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    overrideSiteSpaceCustomizationById: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSiteSpaceRawCustomizationById: (organizationId, siteId, siteSpaceId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization/raw`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getContentAnalyticsForSiteSpaceById: (organizationId, siteId, siteSpaceId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/insights/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSitesPageFeedback: (organizationId, siteId, siteSpaceId, pageId, visitorId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/insights/pages/${pageId}/feedbacks/${visitorId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    moveSiteSection: (organizationId, siteId, siteSectionId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    moveSiteSpace: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPermissionsAggregateInSite: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    trackViewInSiteById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/track_view`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getAdsInsightsForSiteById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/ads`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSearchAnalyticsForSiteById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteAdsById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/ads`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    createSiteRedirect: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteRedirects: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteRedirectById: (organizationId, siteId, siteRedirectId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects/${siteRedirectId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteRedirectById: (organizationId, siteId, siteRedirectId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects/${siteRedirectId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteRedirectBySource: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirect`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  customHostnames = {
    getCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    setupCustomHostname: (hostname, data, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    dnsRevalidateCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "PATCH",
      secure: true,
      ...params
    }),
    removeCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    testCustomHostname: (hostname, data, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}/test`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    })
  };
  ads = {
    adsListSites: (query, params = {}) => this.request({
      path: `/ads/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    adsUpdateSite: (siteId, data, params = {}) => this.request({
      path: `/ads/sites/${siteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    })
  };
  internal = {
    generateHiveAccessToken: (data, params = {}) => this.request({
      path: `/internal/hive/token`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    })
  };
  urls = {
    getContentByUrl: (query, params = {}) => this.request({
      path: `/urls/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getEmbedByUrl: (query, params = {}) => this.request({
      path: `/urls/embed`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPublishedContentByUrl: (query, params = {}) => this.request({
      path: `/urls/published`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
};

// src/GitBookAPIError.ts
var GitBookAPIError = class extends Error {
  response;
  name = "GitBookAPIError";
  code;
  errorMessage;
  constructor(errorMessage, response) {
    const message = `GitBook API failed with [${response.status}] ${response.url}: ${errorMessage}`;
    super(message);
    this.response = response;
    this.code = response.status;
    this.errorMessage = errorMessage;
  }
};

// src/index.ts
var GITBOOK_DEFAULT_ENDPOINT = "https://api.gitbook.com";
var GitBookAPI = class extends Api {
  endpoint;
  authToken;
  userAgent;
  constructor(options = {}) {
    const {
      endpoint = GITBOOK_DEFAULT_ENDPOINT,
      authToken,
      userAgent = `${name}/${version}`
    } = options;
    super({
      baseUrl: `${endpoint}/v1`,
      securityWorker: (securityData) => {
        if (securityData && securityData.authToken) {
          return {
            headers: {
              Authorization: `Bearer ${securityData.authToken}`,
              "User-Agent": userAgent
            }
          };
        }
        return {};
      },
      customFetch: async (input, init) => {
        if (init && "credentials" in init) {
          delete init.credentials;
        }
        if (init && "referrerPolicy" in init) {
          delete init.referrerPolicy;
        }
        const response = await fetch(input, init);
        if (!response.ok) {
          let error = response.statusText;
          try {
            const body = await response.json();
            error = body?.error?.message || error;
          } catch (err) {
          }
          throw new GitBookAPIError(error, response);
        }
        return response;
      }
    });
    this.endpoint = endpoint;
    this.userAgent = userAgent;
    this.authToken = authToken;
    this.setSecurityData({ authToken });
  }
  async createInstallationClient(integrationName, installationId) {
    const { data: installationToken } = await this.integrations.createIntegrationInstallationToken(
      integrationName,
      installationId
    );
    return new GitBookAPI({
      endpoint: this.endpoint,
      userAgent: this.userAgent,
      authToken: installationToken.token
    });
  }
};
export {
  APIIntegrationScope,
  AnalyticsSearchPeriod,
  AnalyticsTrafficInterval,
  Api,
  BillingInterval,
  BillingProduct,
  BillingTrialStatus,
  ChangeRequestReviewStatus,
  ChangeRequestStatus,
  CloudflareHostnameStatus,
  CloudflareHostnameTLSStatus,
  CloudflareHostnameTLSValidationMethod,
  ContentKitIcon,
  ContentReferenceRelation,
  ContentReferenceStatus,
  ContentType,
  ContentVisibility,
  CustomFieldType,
  CustomHostnameDnsStatus,
  CustomHostnameErrorStatus,
  CustomHostnameSslStatus,
  CustomizationBackground,
  CustomizationCorners,
  CustomizationFont,
  CustomizationHeaderPreset,
  CustomizationIconsStyle,
  CustomizationLocale,
  CustomizationThemeMode,
  GITBOOK_DEFAULT_ENDPOINT,
  GitBookAPI,
  GitBookAPIError,
  GitSyncOperationDirection,
  GitSyncOperationStage,
  GitSyncOperationState,
  GitSyncProvider,
  HttpClient,
  ImportContentSource,
  InsightsInterval,
  IntegrationCategory,
  IntegrationInstallationSiteSelection,
  IntegrationInstallationSpaceSelection,
  IntegrationInstallationStatus,
  IntegrationScope,
  IntegrationTarget,
  IntegrationVisibility,
  MemberRole,
  OrganizationBlockReason,
  OrganizationCommunityType,
  OrganizationType,
  OrganizationUseCase,
  PageFeedbackRating,
  PurgeCDNCacheContextType,
  RevisionPageLayoutOptionsCoverSize,
  RevisionPageLayoutPreset,
  RevisionPageType,
  RevisionSemanticChangeType,
  SiteAdsStatus,
  SiteAdsTopic,
  SiteType,
  SiteVisibility,
  SpaceBlockReason,
  SpaceEditMode,
  TeamMemberRole
};
